{"version":3,"sources":["ShowCard.js","App.js","serviceWorker.js","index.js"],"names":["ShowCard","Card","Body","Title","this","props","data","Subtitle","className","Link","href","Component","Formstyle","padding","background","border","App","state","userid","page","search","bind","getUserReops","handleScroll","user","xhr","XMLHttpRequest","url","self","open","onload","setState","JSON","parse","response","send","console","log","window","addEventListener","event","Math","abs","innerHeight","document","documentElement","scrollTop","offsetHeight","Form","style","Group","Row","Label","column","sm","Col","Control","onChange","target","value","placeholder","Button","variant","onClick","size","id","map","card","i","name","description","html_url","key","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.672fc458.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Card } from 'react-bootstrap';\n\nexport default class ShowCard extends Component {\n  render() {\n    return (\n        <Card>\n        <Card.Body>\n          <Card.Title>Title: {this.props.data[0]}</Card.Title>\n          {\n             this.props.data[1] ? \n              <Card.Subtitle className=\"mb-2 text-muted\">Description: {this.props.data[1]}</Card.Subtitle> :\n              <Card.Subtitle className=\"mb-2 text-muted\">no description</Card.Subtitle>\n          }\n          <Card.Link href={this.props.data[2]}>{this.props.data[2]}</Card.Link>\n        </Card.Body>\n        </Card>\n    )\n  }\n}\n","import React, {Component} from 'react';\nimport { Button,Form,Col, Row } from 'react-bootstrap';\nimport ShowCard from './ShowCard';\n\nconst Formstyle = {\n  padding: '10px',\n  background: '#eee',\n  border: '2px solid black'\n}\nclass  App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      userid: 'facebook',\n      data: [],\n      page: 2\n    };\n    this.search = this.search.bind(this);\n    this.getUserReops = this.getUserReops.bind(this);\n    this.handleScroll = this.handleScroll.bind(this);\n  }\n  getUserReops(user, page=1){\n    const xhr = new XMLHttpRequest();\n    const url = `https://api.github.com/users/${user}/repos?page=${page}&per_page=5`;\n    var self = this;\n    xhr.open('GET', url, true);\n    xhr.onload = function(){\n      // console.log(JSON.parse(this.response));\n      self.setState({\n        data : [...self.state.data, ...JSON.parse(this.response)]\n      })\n    }\n    xhr.send();\n  }\n  search(){\n    this.setState({data: []});\n    console.log('search user id is : ', this.state.userid);\n    this.getUserReops(this.state.userid);\n  }\n  componentDidMount(){\n    window.addEventListener('scroll', this.handleScroll);\n  }\n  handleScroll(event){\n    let threshold = 5;\n    if(Math.abs(window.innerHeight + document.documentElement.scrollTop - document.documentElement.offsetHeight) <= threshold){\n      console.log('page: ',  this.state.page);\n      this.setState({page: this.state.page + 1});\n      this.getUserReops(this.state.userid, this.state.page);\n    }\n  }\n  render(){\n    return (\n         <div>\n            <h1>Get github repos: </h1>\n            <Form style={Formstyle}>\n            <Form.Group>\n          <Row> \n              <Form.Label column sm>User ID:</Form.Label>\n            </Row> \n            <Row> \n              <Col sm={5}>\n                   <Form.Control onChange={event => this.setState({ userid: event.target.value})}  placeholder =\"type user ID\" />\n              </Col>\n              <Col>\n                   <Button  variant=\"warning\" onClick={this.search} size=\"sm\">Search</Button>\n              </Col>\n              </Row>\n            </Form.Group>\n            </Form>\n           <div id=\"allCard\">\n                {\n                  this.state.data.map(\n                    (card, i) => {\n                      let props = [card.name, card.description, card.html_url];\n                      return <ShowCard key={i} data={props}></ShowCard>;\n                    })\n                }\n           </div>\n          </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}